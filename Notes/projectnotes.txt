========================================================================
			Java Project
========================================================================
Project Title		:	Employee Management System 

Client			:	Codetru, Bridgesoft, Appollodart and etc.

Environments		:	Java8, Spring Boot, ReactJS 

Database		:	MySQL 

Tools			:	POSTMAN, GIT/GITHUB, MAVEN

IDE's			:	STS/Intellij , VSC editor. 
=========================================================================


Steps to develop Employee Management System project 
====================================================

Project Structure 
-----------------
springboot-backend
|
|---src/main/java
|	|
	|---com.ihub.www
		|
		|---SpringBootBackendApplication.java
	|
	|---com.ihub.www.controller	
		|
		|---EmployeeController.java

	|---com.ihub.www.service	
		|
		|---EmployeeService.java
	
	|---com.ihub.www.repo	
		|
		|---EmployeeRepository.java (interface)
	
	|---com.ihub.www.model
		|
		|---Employee.java
	
	|---com.ihub.www.exception	
		|
		|---ResourceNotFoundException.java

|---src/main/resources
|	|
	|---application.properties

|---src/test/java
|
|---pom.xml 

step1:
------
	Create a spring boot starter project i.e springboot-backend.
	ex:
		starters:	
				Spring Web 
				Spring Data JPA
				Lombok
				MySQL Driver 
				Springboot DevTools 

step2:
------
	Connect to MySQL database and create the schema later use it.
	
	ex:
		MYSQL> create schema employee_management_system;

		MYSQL> use employee_management_system;
	
step3:
------
	Create employees table with records.
	ex:
		MYSQL> create table employees(
					id  int(3) AUTO_INCREMENT,
					first_Name  varchar(10),
					last_Name   varchar(10),
					email      varchar(15),
					primary key(id)		
				);

		MYSQL> insert into employees values(1,'Alan','Morries','alan@gmail.com');
		MYSQL> insert into employees values(2,'Erick','Anderson','erick@zoho.com');
		MYSQL> commit;

step4:
-----
	Add server port number, MySQL properties and hibernate properties inside 
	application.properties file.

application.properties
-----------------------
spring.application.name=springboot-backend

server.port=9090

spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/employee_management_system
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update


step5:
------
	Create a Employee model class inside "com.ihub.www.model" package.

Employee.java
--------------
package com.ihub.www.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name="employees")
@Data
@AllArgsConstructor
@NoArgsConstructor
public class Employee 
{
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column
	private String firstName;
	
	@Column
	private String lastName;
	
	@Column
	private String email;
}

step6:
------
	Create EmployeeRepository interface inside "com.ihub.www.repo" package.

EmployeeRepository.java
-----------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long>
{

}

step7:
-----
	Create EmployeeService class inside "com.ihub.www.service" package.

EmployeeService.java
---------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
}

step8:
----
	Create a EmployeeController class inside "com.ihub.www.controller" package.

EmployeeController.java
-------------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
}

step9:
-----
	Run the spring boot starter project.

step10:
--------
	Open the POSTMAN and test the below Rest API.
	ex:
		Method 		Request url
		-------		-----------
		GET		http://localhost:9090/api/v1/employees


step11:
--------
	Create a Exception class inside "com.ihub.www.exception" package.

RosourceNotFoundException.java
------------------------------
package com.ihub.www.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException
{
	public ResourceNotFoundException(String message)
	{
		super(message);
	}
}


step12:
--------
	Create a react project i.e react-frontend.
	ex:
		reactworkspace> npx create-react-app  react-frontend

step13:
------
	Open the VSC editor.
	ex:
		reactworkspace> code . 

step14:
------
	Switch to the project.
	ex:
		reactworkspace> cd  react-frontend.

step15:
------
	Install web-vitals, bootstrap and axios library.
	ex:
		
		reactworkspace/react-fronend> npm install web-vitals
		reactworkspace/react-fronend> npm install bootstrap
		reactworkspace/react-fronend> npm install axio 

step16:
-------
	Import bootstrap inside index.js file.

index.js
-------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import '../node_modules/bootstrap/dist/css/bootstrap.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();



step17:
------
	Create a service folder inside "src" folder.


step18:
------
	Create a EmployeeService.js file inside "service" folder.

EmployeeService.js
-----------------
import axios from 'axios';

const EMPLOYEE_BASE_API="http://localhost:9090/api/v1/employees";

class EmployeeService
{
    getEmployees()
    {
        return axios.get(EMPLOYEE_BASE_API);
    }
}
export default new EmployeeService();


step19:
-------
	create a "components" folder inside "src" folder.

 
step20:
------
	Create a  EmployeeListComponent.js file inside "components" folder.

EmployeeListComponent.js
------------------------
import {Component} from 'react';
import EmployeeService from '../service/EmployeeService';

class EmployeeListComponent extends Component
{
    constructor()
    {
        super();

        this.state={
            employees:[]
        }
    }

    componentDidMount()
    {
        EmployeeService.getEmployees().then(res=>{
            this.setState({employees:res.data});
        })
    }

    render()
    {
        return (
             <div className='container mt-5'>
                <h3 className='text-center'>Employee List</h3>

                <div className='row mt-5'>
                    <table className='table table-bordered table-striped'>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>FIRSTNAME</th>
                                <th>LASTNAME</th>
                                <th>EMAIL</th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                this.state.employees.map(employee=>{
                                    return <tr key={employee.id}>
                                                <td>{employee.id}</td>
                                                <td>{employee.firstName}</td>
                                                <td>{employee.lastName}</td>
                                                <td>{employee.email}</td>
                                            </tr>
                                })
                            }
                        </tbody>
                    </table>
                </div>
             </div>   
        )
    }
}
export default EmployeeListComponent;




step21:
-------
	Call EmployeeListComponent.js file from App.js file.

App.js 
-------
import React from 'react'
import EmployeeListComponent from './components/EmployeeListComponent'

function App() {
  return (
    <div>
        <EmployeeListComponent/>
    </div>
  )
}

export default App



step22:
------
	Run react application.
	ex:
		react-frontend> npm start 

step23:
------
	To avoid Network Error we need to add @CrossOrigin Annotation on EmployeeController.java file.

EmployeeController.java
----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
}



step24:
-------
	Create HeaderComponent inside "components" folder. 

HeaderComponent.js
------------------
import React from 'react'
function HeaderComponent() {
  return (
    <header>
      <nav className='navbar navbar-expand-md navbar-dark bg-dark'>
        <div className='container'>
            <a href='' className='navbar-brand'> Employee Management System</a>
        </div>
      </nav>
    </header>
  )
}
export default HeaderComponent


step25:
-------
	Create FooterComponent inside "components" folder. 

FooterComponent.js 
-------------------
import React from 'react'
import '../App.css';

function FooterComponent() {
  return (
    <footer>
        <div className='footer'>AllRightReserved &copy; by Niyaz Sir</div>
    </footer>
  )
}
export default FooterComponent



step26:
-------
	Add the CSS styles to FooterComponent.js file.

App.css
-------
.footer
{
  position:absolute;
  bottom: 0;
  width:100%;
  height: 30px;
  background-color: black;
  color: white;
  text-align: center;
} 


step27:
-------
	Call HeaderComponent and FooterComponent from App.js file.

App.js file 
-----------
import React from 'react'
import EmployeeListComponent from './components/EmployeeListComponent'
import HeaderComponent from './components/HeaderComponent'
import FooterComponent from './components/FooterComponent'
function App() {
  return (
    <div>
      <HeaderComponent/>

      <div className='container'>
          <EmployeeListComponent/>
      </div>

      <FooterComponent/>

    </div>
  )
}

export default App

step28:
-------
	Install react-router-dom dependency for routing.

	ex:
		npm install react-router-dom 


step29:
-------
	Create a App.js file as a routing file.

App.js 
-------
import React from 'react'
import EmployeeListComponent from './components/EmployeeListComponent'
import HeaderComponent from './components/HeaderComponent'
import FooterComponent from './components/FooterComponent'
import {BrowserRouter,Routes,Route} from 'react-router-dom';

function App() {
  return (
    <div>
      <HeaderComponent/>

      <BrowserRouter>

      <div className='container'>
        <Routes>
          <Route exact path='/' element={<EmployeeListComponent/>}></Route>
          <Route path='/employees' element={<EmployeeListComponent/>}></Route>
        </Routes>
      </div>

      </BrowserRouter>

      <FooterComponent/>

    </div>
  )
}

export default App


step30:
-----
	Check the below request urls for routing.
	ex:
		http://localhost:3000/
		http://localhost:3000/employees 


step31:
-------
	Create a POST method inside EmployeeController.java.


EmployeeController.java
---------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@PostMapping("/employees")
	public Employee createEmployee(@RequestBody Employee employee)
	{
		return employeeService.createEmployee(employee);
	}
}



step32:
-------
	Add post method inside EmployeeService.java

EmployeeService.java
---------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee createEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
}

step33:
-------
	Add createEmployee() method to post the data inside EmployeeService.js file.

EmployeeService.js
-------------------
import axios from 'axios';

const EMPLOYEE_BASE_API="http://localhost:9090/api/v1/employees";

class EmployeeService
{
    getEmployees()
    {
        return axios.get(EMPLOYEE_BASE_API);
    }

    createEmployee(employee)
    {
        return axios.post(EMPLOYEE_BASE_API,employee);
    }
}
export default new EmployeeService();

step34:
-------
	Create CreateEmployeeComponent.js file inside "components" folder.

CreateEmployeeComponent.js 
---------------------------
import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'

function CreateEmployeeComponent() 
{

    let navigate=useNavigate();

    const [employee,setEmployee]=useState({
        firstName:"",
        lastName:"",
        email:""
    })

    const handleCancel=(e)=>{
        e.preventDefault();
        navigate("/employees");
    }


  return (
    <div className='cotainer mt-3'>
         <div className='card col-md-6 offset-3'>

        <h4 className='text-center pt-3'> Add Employee</h4>
        
         <div className='card-body'>
            <form>
                <label className='my-3'>FirstName:</label>
                <input type="text" name="firstName" id="firstName" className='form-control'/>

                 <label className='my-3'>LastName:</label>
                <input type="text" name="lastName" id="lastName" className='form-control'/>

                 <label className='my-3'>Email:</label>
                <input type="text" name="email" id="email" className='form-control'/>

                  <button className='btn btn-danger mt-3' onClick={handleCancel}> cancel </button>
                  <button className='btn btn-success mt-3 ms-3'> save </button>  
            </form>
         </div>

         </div>
    </div>
  )
}

export default CreateEmployeeComponent




step35:
-------
	Now add CreateEmployeeComponent.js file for routing.

App.js 
--------
import React from 'react'
import EmployeeListComponent from './components/EmployeeListComponent'
import HeaderComponent from './components/HeaderComponent'
import FooterComponent from './components/FooterComponent'
import {BrowserRouter,Routes,Route} from 'react-router-dom';
import CreateEmployeeComponent from './components/CreateEmployeeComponent';

function App() {
  return (
    <div>
      <HeaderComponent/>

      <BrowserRouter>

      <div className='container'>
        <Routes>
          <Route exact path='/' element={<EmployeeListComponent/>}></Route>
          <Route path='/employees' element={<EmployeeListComponent/>}></Route>
          <Route path='/add-employee' element={<CreateEmployeeComponent/>}></Route>
        </Routes>
      </div>

      </BrowserRouter>

      <FooterComponent/>

    </div>
  )
}

export default App


step36:
--------

	Add "Add Employee" button inside "EmployeeListComponent.js" file.

EmployeeListComponent.js 
-----------------------
import {Component} from 'react';
import EmployeeService from '../service/EmployeeService';
import { Link } from 'react-router-dom';

class EmployeeListComponent extends Component
{
    constructor()
    {
        super();

        this.state={
            employees:[]
        }
    }

    componentDidMount()
    {
        EmployeeService.getEmployees().then(res=>{
            this.setState({employees:res.data});
        })
    }

    render()
    {
        return (
             <div className='container mt-5'>
                <h3 className='text-center'>Employee List</h3>

                <div className='row mt-5'>

        <Link to="/add-employee" className='btn btn-primary'> Add Employee </Link>            
                    <table className='table table-bordered table-striped'>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>FIRSTNAME</th>
                                <th>LASTNAME</th>
                                <th>EMAIL</th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                this.state.employees.map(employee=>{
                                    return <tr key={employee.id}>
                                                <td>{employee.id}</td>
                                                <td>{employee.firstName}</td>
                                                <td>{employee.lastName}</td>
                                                <td>{employee.email}</td>
                                            </tr>
                                })
                            }
                        </tbody>
                    </table>
                </div>
             </div>   
        )
    }
}
export default EmployeeListComponent;



step37:
------
	Create a form inside "CreateEmployeeComponent.js" file.

CreateEmployeeComponent.js
--------------------------
import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import EmployeeService from '../service/EmployeeService';

function CreateEmployeeComponent() 
{

    let navigate=useNavigate();

    const [employee,setEmployee]=useState({
        firstName:"",
        lastName:"",
        email:""
    })

    const handleCancel=(e)=>{
        e.preventDefault();
        navigate("/employees");
    }

    const handleChange=(e)=>{
      const name=e.target.name;
      const value=e.target.value;
      setEmployee({... employee,[name]:value});
    }

    const saveHandle=(e)=>{
      e.preventDefault();
      console.log("Result : "+JSON.stringify(employee));

      EmployeeService.createEmployee(employee).then(res=>{
        navigate("/employees")
      })
    }


  return (
    <div className='cotainer mt-3'>
         <div className='card col-md-6 offset-3'>

        <h4 className='text-center pt-3'> Add Employee</h4>
        
         <div className='card-body'>
            <form>
                <label className='my-3'>FirstName:</label>
                <input type="text" name="firstName" id="firstName" className='form-control'
                value={employee.firstName} onChange={handleChange}/>

                 <label className='my-3'>LastName:</label>
                <input type="text" name="lastName" id="lastName" className='form-control'
                value={employee.lastName} onChange={handleChange}/>

                 <label className='my-3'>Email:</label>
                <input type="text" name="email" id="email" className='form-control'
                value={employee.email} onChange={handleChange}/>

                  <button className='btn btn-danger mt-3' onClick={handleCancel}> cancel </button>
                  <button className='btn btn-success mt-3 ms-3' onClick={saveHandle}> save </button>  
            </form>
         </div> 

         </div>
    </div>
  )
}

export default CreateEmployeeComponent




step38:
------
	Create a get employee by id REST API in spring boot.

EmployeeController.java
---------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@PostMapping("/employees")
	public Employee createEmployee(@RequestBody Employee employee)
	{
		return employeeService.createEmployee(employee);
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
}


EmployeeService.java
-------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee createEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	
	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Id Not Found"));
	}
}


step39:
-------
	Create update employee by id REST API in spring boot.

EmployeeController.java
-----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@PostMapping("/employees")
	public Employee createEmployee(@RequestBody Employee employee)
	{
		return employeeService.createEmployee(employee);
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
	
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable long id,@RequestBody Employee employee)
	{
		return employeeService.updateEmployee(id,employee);
	}
	
}



EmployeeService.java
---------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee createEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	
	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Id Not Found"));
	}
	
	public ResponseEntity<Employee> updateEmployee(long id,Employee employee)
	{
		Employee oldEmp=employeeRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Id Not Found"));
		oldEmp.setFirstName(employee.getFirstName());
		oldEmp.setLastName(employee.getLastName());
		oldEmp.setEmail(employee.getEmail());
		
		employeeRepository.save(oldEmp);
		
		return ResponseEntity.ok(oldEmp);
	}
}



step40:
-------
	Add get and put method inside "EmployeeService.js" file.

EmployeeService.js
-----------------
import axios from 'axios';

const EMPLOYEE_BASE_API="http://localhost:9090/api/v1/employees";

class EmployeeService
{
    getEmployees()
    {
        return axios.get(EMPLOYEE_BASE_API);
    }

    createEmployee(employee)
    {
        return axios.post(EMPLOYEE_BASE_API,employee);
    }

    getEmployeeById(employeeId)
    {
        return axios.get(EMPLOYEE_BASE_API+'/'+employeeId);
    }

    updateEmployee(employeeId,employee)
    {
         return axios.put(EMPLOYEE_BASE_API+'/'+employeeId,employee);   
    }


}
export default new EmployeeService();




step41:
-------
	Create "UpdateEmployeeComponent.js" file inside "components" folder.

UpdateEmployeeComponent.js
--------------------------
import React from 'react'
import { useState, useEffect } from 'react'
import {useParams, useNavigate} from 'react-router-dom';
import EmployeeService from '../service/EmployeeService';

function UpdateEmployeeComponent() 
{

  let navigate=useNavigate();

  const [firstName,setFirstName]=useState("");
  const [lastName,setLastName]=useState("");
  const [email,setEmail]=useState("");
  const {id}=useParams(); 

    useEffect(()=>{
        EmployeeService.getEmployeeById(id).then(res=>{
            setFirstName(res.data.firstName);
            setLastName(res.data.lastName);
            setEmail(res.data.email);
        })
    },[])

    const cancelHandle=(e)=>{
            e.preventDefault();
           navigate("/employees");
    }

    const updateHandler=(e)=>{
         
        e.preventDefault();
        const employee={firstName,lastName,email};

        if(id)
        {
            EmployeeService.updateEmployee(id,employee).then(res=>{
                navigate("/employees")
            })
        }
        else
        {
            EmployeeService.createEmployee(employee).then(res=>{
                navigate('/employees')
            })
        }
    }

   
  return (
    <div className='cotainer mt-3'>
         <div className='card col-md-6 offset-3'>

        <h4 className='text-center pt-3'> Update Employee</h4>
        
         <div className='card-body'>
            <form>
                <label className='my-3'>FirstName:</label>
                <input type="text" name="firstName" id="firstName" className='form-control'
                value={firstName}
                onChange={(e)=> setFirstName(e.target.value)}/>

                 <label className='my-3'>LastName:</label>
                <input type="text" name="lastName" id="lastName" className='form-control'
               value={lastName} onChange={(e)=> setLastName(e.target.value)}/>

                 <label className='my-3'>Email:</label>
                <input type="text" name="email" id="email" className='form-control'
                value={email} onChange={(e)=> setEmail(e.target.value)}/>

                  <button className='btn btn-danger mt-3' onClick={cancelHandle}> cancel </button>
                  <button className='btn btn-success mt-3 ms-3' onClick={updateHandler}> save </button>  
            </form>
         </div> 

         </div>
    </div>
  )
}

export default UpdateEmployeeComponent




step42:
------
	Add UpdateEmployeeComponent.js file for routing inside App.js file.

App.js 
------
import React from 'react'
import EmployeeListComponent from './components/EmployeeListComponent'
import HeaderComponent from './components/HeaderComponent'
import FooterComponent from './components/FooterComponent'
import {BrowserRouter,Routes,Route} from 'react-router-dom';
import CreateEmployeeComponent from './components/CreateEmployeeComponent';
import UpdateEmployeeComponent from './components/UpdateEmployeeComponent';

function App() {
  return (
    <div>
      <HeaderComponent/>

      <BrowserRouter>

      <div className='container'>
        <Routes>
          <Route exact path='/' element={<EmployeeListComponent/>}></Route>
          <Route path='/employees' element={<EmployeeListComponent/>}></Route>
          <Route path='/add-employee' element={<CreateEmployeeComponent/>}></Route>
          <Route path='/update-employee/:id' element={<UpdateEmployeeComponent/>}></Route>
        </Routes>
      </div>

      </BrowserRouter>

      <FooterComponent/>

    </div>
  )
}

export default App



step43:
------
	Add update button inside "EmployeeListComponent.js" file.

EmployeeListComponent.js 
--------------------------
import {Component} from 'react';
import EmployeeService from '../service/EmployeeService';
import { Link } from 'react-router-dom';

class EmployeeListComponent extends Component
{
    constructor()
    {
        super();

        this.state={
            employees:[]
        }
    }

    componentDidMount()
    {
        EmployeeService.getEmployees().then(res=>{
            this.setState({employees:res.data});
        })
    }

    render()
    {
        return (
             <div className='container mt-5'>
                <h3 className='text-center'>Employee List</h3>

                <div className='row mt-5'>

        <Link to="/add-employee" className='btn btn-primary'> Add Employee </Link>            
                    <table className='table table-bordered table-striped'>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>FIRSTNAME</th>
                                <th>LASTNAME</th>
                                <th>EMAIL</th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                this.state.employees.map(employee=>{
                                    return <tr key={employee.id}>
                                                <td>{employee.id}</td>
                                                <td>{employee.firstName}</td>
                                                <td>{employee.lastName}</td>
                                                <td>{employee.email}</td>
                                                <td>
    <Link to={`/update-employee/${employee.id}`} className='btn btn-info'> update </Link>      
                                                </td>
                                            </tr>
                                })
                            }
                        </tbody>
                    </table>
                </div>
             </div>   
        )
    }
}
export default EmployeeListComponent;


step44:
------
	Add delete rest api in spring boot.

EmployeeController.java
----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@PostMapping("/employees")
	public Employee createEmployee(@RequestBody Employee employee)
	{
		return employeeService.createEmployee(employee);
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
	
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable long id,@RequestBody Employee employee)
	{
		return employeeService.updateEmployee(id,employee);
	}
	
	@DeleteMapping("/employees/{id}")
	public ResponseEntity<HttpStatus> deleteEmployee(@PathVariable long id)
	{
		return employeeService.deleteEmployee(id);
	}
	
}



EmployeeService.java
--------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee createEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	
	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Id Not Found"));
	}
	
	public ResponseEntity<Employee> updateEmployee(long id,Employee employee)
	{
		Employee oldEmp=employeeRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Id Not Found"));
		oldEmp.setFirstName(employee.getFirstName());
		oldEmp.setLastName(employee.getLastName());
		oldEmp.setEmail(employee.getEmail());
		
		employeeRepository.save(oldEmp);
		
		return ResponseEntity.ok(oldEmp);
	}
	
	
	public ResponseEntity<HttpStatus> deleteEmployee(long id)
	{
		Employee employee=employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException(("Id Not Found")));
		employeeRepository.delete(employee);
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
}



step45:
------
	Add delete method inside "EmployeeService.js" file.

EmployeeService.js
--------------------
import axios from 'axios';

const EMPLOYEE_BASE_API="http://localhost:9090/api/v1/employees";

class EmployeeService
{
    getEmployees()
    {
        return axios.get(EMPLOYEE_BASE_API);
    }

    createEmployee(employee)
    {
        return axios.post(EMPLOYEE_BASE_API,employee);
    }

    getEmployeeById(employeeId)
    {
        return axios.get(EMPLOYEE_BASE_API+'/'+employeeId);
    }

    updateEmployee(employeeId,employee)
    {
         return axios.put(EMPLOYEE_BASE_API+'/'+employeeId,employee);   
    }

    deleteEmployee(employeeId)
    {
        return axios.delete(EMPLOYEE_BASE_API+'/'+employeeId);
    }
}
export default new EmployeeService();




step46:
-------
	Add delete button logic inside "EmployeeListComponent.js" file

EmployeeListComponent.js
------------------------
import {Component} from 'react';
import EmployeeService from '../service/EmployeeService';
import { Link } from 'react-router-dom';

class EmployeeListComponent extends Component
{
    constructor()
    {
        super();

        this.state={
            employees:[]
        }
    }

    componentDidMount()
    {
        EmployeeService.getEmployees().then(res=>{
            this.setState({employees:res.data});
        })
    }

    deleteEmployee=(employeeId)=>{
        EmployeeService.deleteEmployee(employeeId).then(res=>{
            EmployeeService.getEmployees().then(res=>{
                this.setState({employees:res.data})
            })
        })
        .catch(error=>
            {
                console.log(error);
            })
    
    }

    render()
    {
        return (
             <div className='container mt-5'>
                <h3 className='text-center'>Employee List</h3>

                <div className='row mt-5'>

        <Link to="/add-employee" className='btn btn-primary'> Add Employee </Link>            
                    <table className='table table-bordered table-striped'>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>FIRSTNAME</th>
                                <th>LASTNAME</th>
                                <th>EMAIL</th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                this.state.employees.map(employee=>{
                                    return <tr key={employee.id}>
                                                <td>{employee.id}</td>
                                                <td>{employee.firstName}</td>
                                                <td>{employee.lastName}</td>
                                                <td>{employee.email}</td>
                                                <td>
    <Link to={`/update-employee/${employee.id}`} className='btn btn-info'> update </Link>      
    <button className='btn btn-danger' style={{marginLeft:"10px"}}
    onClick={()=> this.deleteEmployee(employee.id)}> delete </button>                                          
                                                </td>
                                            </tr>
                                })
                            }
                        </tbody>
                    </table>
                </div>
             </div>   
        )
    }
}
export default EmployeeListComponent;


How to push the code to github
==============================
step1:
------
	Create a remote repository.
	ex:
		https://github.com/NiyazulHasan/java-project40

step2:
------
	Create a folder on a desktop and add the project files.

step3:
------
	Open the git bash from same folder.

step4:
-----
	initialized empty git repository.
	ex:
		git init 

step5:
------
	Switch master branch to main branch.
	ex:
		git branch --move master main 
	

step6:
------
	Add the files to staging area.
	ex:
		git add . 

step7:
-----
	Commit the changes.
	ex:
		git commit -m "Project Notes"

step8:
------
	Add remote repository.
	ex:
		git remote add origin https://github.com/NiyazulHasan/java-project40

step9:
------
	Push the code.
	ex:
		git push -f origin main 

